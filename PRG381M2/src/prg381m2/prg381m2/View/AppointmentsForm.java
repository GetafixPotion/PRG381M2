/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package prg381m2.prg381m2.View;

import javax.swing.*;//Enables you to use GUI components like
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;//This class handles errors when parsing invalid dates or times.
import java.util.List;
import java.sql.Connection;//This imports the Connection class from JDBC
import javax.swing.table.DefaultTableModel;//Used to populate and update a JTable dynamically

//class imports
import prg381m2.prg381m2.Model.Appointment;
import prg381m2.prg381m2.Model.AppointmentDA;
import prg381m2.prg381m2.Model.DBConnectionAppointment;
import prg381m2.prg381m2.Model.Initializer;

public class AppointmentsForm extends javax.swing.JFrame {

    // Creates new form Appointment
     
    //Database connection and access object
    public Connection conn;
    public AppointmentDA dao;
    
    public AppointmentsForm() {
      
        
        //auto generate gui setup
    initComponents();
     
           try {
             // Connect to the database
        DBConnectionAppointment db = new DBConnectionAppointment();
        db.connect();
        
        // Store connection for later use
        conn = db.getConnection();

        // Initialize the AppointmentDA using connection
        dao = new AppointmentDA(conn); // ‚Üê THIS was missing

        // Create table if it doesn't exist
        Initializer initializer = new Initializer(conn);
        initializer.createTable();

        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cmbTime = new javax.swing.JComboBox<>();
        cmbCounsellor = new javax.swing.JComboBox<>();
        txtDate = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();
        View = new javax.swing.JButton();
        btnHom = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInfo = new javax.swing.JTable();
        lblAppointment = new javax.swing.JLabel();
        javax.swing.JLabel lblStudent = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 153, 0));

        cmbTime.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00" }));

        cmbCounsellor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbCounsellor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Heiner", "Jana", "Demica" }));

        txtDate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtDate.setText("M/d/yy");

        txtName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jButton1.setBackground(new java.awt.Color(255, 102, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Add Appointment");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Update.setBackground(new java.awt.Color(255, 102, 0));
        Update.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Update.setForeground(new java.awt.Color(255, 255, 255));
        Update.setText("Update Appointment");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Cancel.setBackground(new java.awt.Color(255, 102, 0));
        Cancel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Cancel.setForeground(new java.awt.Color(255, 255, 255));
        Cancel.setText("Cancel Appointment");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        View.setBackground(new java.awt.Color(255, 102, 0));
        View.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        View.setForeground(new java.awt.Color(255, 255, 255));
        View.setText("View Appointments");
        View.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewActionPerformed(evt);
            }
        });

        btnHom.setBackground(new java.awt.Color(255, 102, 0));
        btnHom.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnHom.setForeground(new java.awt.Color(255, 255, 255));
        btnHom.setText("Home");
        btnHom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomActionPerformed(evt);
            }
        });

        tblInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "StudentID", "Student name", "Counselor", "Date", " Time", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblInfo);

        lblAppointment.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblAppointment.setText("Appointment Management");

        lblStudent.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblStudent.setText("Student Name:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Counselor:");

        lblDate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblDate.setText("Date:");

        lblTime.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTime.setText("Time:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(443, 443, 443)
                                .addComponent(btnHom))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 902, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addComponent(jButton1)
                                        .addGap(29, 29, 29)
                                        .addComponent(Update)
                                        .addGap(30, 30, 30)))
                                .addComponent(Cancel)
                                .addGap(38, 38, 38)
                                .addComponent(View)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(43, 43, 43))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbCounsellor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(607, 607, 607))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(221, 221, 221))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblAppointment)
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStudent))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCounsellor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTime))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(Update)
                    .addComponent(Cancel)
                    .addComponent(View))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnHom)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //creating varibles and assigning input values
        String studentName =txtName.getText().trim();
        String counselorName = (String) cmbCounsellor.getSelectedItem();
        String dateText = txtDate.getText().trim();
        String timeText = (String) cmbTime.getSelectedItem();
        String status = "Scheduled";

        // Validation for empty fields
        if (studentName.isEmpty() || counselorName == null || dateText.isEmpty() || timeText == null) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Parse date and time
            LocalDate appointmentDate = LocalDate.parse(dateText, DateTimeFormatter.ofPattern("M/d/yy")); // Adjust format as needed
            LocalTime appointmentTime = LocalTime.parse(timeText, DateTimeFormatter.ofPattern("HH:mm"));

            // Create Appointment object
            Appointment newAppointment = new Appointment(0, studentName, counselorName, appointmentDate, appointmentTime, status);

            // Add to database
            dao.add(newAppointment);
            JOptionPane.showMessageDialog(this, "Appointment added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Clear input fields
            txtName.setText("");
            txtDate.setText("");
            cmbCounsellor.setSelectedIndex(0);
            cmbTime.setSelectedIndex(0);

            refreshTable();
            
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(this, "Invalid date or time format. Please use MM/dd/yy for date and HH:mm for time.", 
                "Format Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error adding appointment: " + e.getMessage(), 
                "Database Error", JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        ///get selected row                                     
        int selectedRow = tblInfo.getSelectedRow();

        // Check if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment to update.", "No Selection", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Extract appointment ID from table
        int id = (int) tblInfo.getValueAt(selectedRow, 0); 

        // Get values from input fields
        String studentName = txtName.getText().trim();
        String counselorName = (String) cmbCounsellor.getSelectedItem();
        String dateText = txtDate.getText().trim();
        String timeText = (String) cmbTime.getSelectedItem();
        String status = "Rescheduled";

        // Validate inputs
        if (studentName.isEmpty() || counselorName == null || dateText.isEmpty() || timeText == null) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Parse date and time
            LocalDate appointmentDate = LocalDate.parse(dateText, DateTimeFormatter.ofPattern("M/d/yy"));
            LocalTime appointmentTime = LocalTime.parse(timeText, DateTimeFormatter.ofPattern("HH:mm"));

            // Create Appointment object
            Appointment updatedAppointment = new Appointment(id, studentName, counselorName, appointmentDate, appointmentTime, status);

            // Update in database
            dao.updateAppointment(updatedAppointment);
            JOptionPane.showMessageDialog(this, "Appointment updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Clear input fields
            txtName.setText("");
            txtDate.setText("");
            cmbCounsellor.setSelectedIndex(0);
            cmbTime.setSelectedIndex(0);
            
            refreshTable();

            
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid date or time format. Please use MM/dd/yy for date and HH:mm for time.", 
                "Format Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error updating appointment: " + e.getMessage(), 
                "Database Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_UpdateActionPerformed

    private void btnHomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomActionPerformed
        Dashboard dashboard = new Dashboard();
        dashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnHomActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        int selectedRow = tblInfo.getSelectedRow();
    
        // Check if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment to cancel.", "No Selection", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Get ID from table
            int id = (int) tblInfo.getValueAt(selectedRow, 0);

            // Delete from database
            dao.deleteAppointment(id);
            JOptionPane.showMessageDialog(this, "Appointment canceled successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Refresh table
            refreshTable();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error canceling appointment: " + e.getMessage(), 
                "Database Error", JOptionPane.ERROR_MESSAGE);
        }
       
    }//GEN-LAST:event_CancelActionPerformed

    private void ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewActionPerformed
        refreshTable();
    }//GEN-LAST:event_ViewActionPerformed
    
    private  void refreshTable(){
    try {
        // Get data using existing DAO
        List<Appointment> list = dao.getAllAppointments();

        // Clear and fill table
        DefaultTableModel model = (DefaultTableModel) tblInfo.getModel();
        model.setRowCount(0);

        for (Appointment a : list) {
            model.addRow(new Object[] {
                a.getId(),
                a.getStudentName(),
                a.getCounselorname(),
                a.getAppointmentdate().format(DateTimeFormatter.ofPattern("M/d/yy")),
                a.getAppointmentTime().format(DateTimeFormatter.ofPattern("HH:mm")),
                a.getStatus()
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error retrieving appointments: " + e.getMessage(), 
            "Database Error", JOptionPane.ERROR_MESSAGE);
    }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppointmentsForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancel;
    private javax.swing.JButton Update;
    private javax.swing.JButton View;
    private javax.swing.JButton btnHom;
    private javax.swing.JComboBox<String> cmbCounsellor;
    private javax.swing.JComboBox<String> cmbTime;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAppointment;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTable tblInfo;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
