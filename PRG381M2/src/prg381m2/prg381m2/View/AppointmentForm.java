/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package prg381m2.prg381m2.View;


import javax.swing.*;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.sql.Connection;
import javax.swing.table.DefaultTableModel;

//class imports
import prg381m2.prg381m2.Model.Appointment;
import prg381m2.prg381m2.Model.AppointmentDA;
import prg381m2.prg381m2.Model.DBConnectionAppointment;
import prg381m2.prg381m2.Model.Initializer;


 
    
public class AppointmentForm extends javax.swing.JFrame {

  
     // Creates new form Appointment
     
    //Database connection and access object
    public Connection conn;
    public AppointmentDA dao;
    
   public AppointmentForm() {
    //auto generate gui setup
    initComponents();
     
           try {
            DBConnectionAppointment db = new DBConnectionAppointment();
            db.connect();

            Initializer initializer = new Initializer(db.getConnection());
            initializer.createTable();

        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAppointment = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        lblCounselor = new javax.swing.JLabel();
        javax.swing.JLabel lblStudent = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        BtnAdd = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        BtnCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAppointments = new javax.swing.JTable();
        txtdate = new javax.swing.JFormattedTextField();
        cmbCounselorname = new javax.swing.JComboBox<>();
        cmbtime = new javax.swing.JComboBox<>();
        BtnHome = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txtStudentName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 153, 0));
        setFocusableWindowState(false);

        lblAppointment.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblAppointment.setText("Appointment Management");

        lblDate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblDate.setText("Date:");

        lblTime.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTime.setText("Time:");

        lblCounselor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblCounselor.setText("Counselor:");

        lblStudent.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblStudent.setText("Student Name:");

        btnUpdate.setBackground(new java.awt.Color(255, 122, 53));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update Appointment");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        BtnAdd.setBackground(new java.awt.Color(255, 122, 53));
        BtnAdd.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BtnAdd.setForeground(new java.awt.Color(255, 255, 255));
        BtnAdd.setText("Add Appointment");
        BtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAddActionPerformed(evt);
            }
        });

        btnView.setBackground(new java.awt.Color(255, 122, 53));
        btnView.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnView.setForeground(new java.awt.Color(255, 255, 255));
        btnView.setText("View Appointments");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        BtnCancel.setBackground(new java.awt.Color(255, 122, 53));
        BtnCancel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BtnCancel.setForeground(new java.awt.Color(255, 255, 255));
        BtnCancel.setText("Cancel Appointment");
        BtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelActionPerformed(evt);
            }
        });

        tblAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Student Name", "Counselor", "Date", "Time", "Status", "ID"
            }
        ));
        jScrollPane1.setViewportView(tblAppointments);

        txtdate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        txtdate.setText("y/MM/dd");
        txtdate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        cmbCounselorname.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbCounselorname.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Heiner", "Jana", "Demica" }));

        cmbtime.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbtime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00" }));

        BtnHome.setBackground(new java.awt.Color(255, 122, 53));
        BtnHome.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BtnHome.setForeground(new java.awt.Color(255, 255, 255));
        BtnHome.setText("Home");
        BtnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnHomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(414, 414, 414)
                .addComponent(BtnHome)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCounselor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblStudent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtdate, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbtime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbCounselorname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 874, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70)
                                .addComponent(lblAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BtnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdate)
                                .addGap(28, 28, 28)
                                .addComponent(BtnCancel)
                                .addGap(36, 36, 36)))
                        .addComponent(btnView)))
                .addGap(0, 37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(lblAppointment))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudent)
                    .addComponent(txtStudentName, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCounselor)
                    .addComponent(cmbCounselorname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate)
                    .addComponent(txtdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTime)
                    .addComponent(cmbtime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(BtnCancel)
                    .addComponent(btnView))
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BtnHome)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAddActionPerformed
         //creating varibles and assigning input values
        String studentName = txtStudentName.getText().trim();
        String counselorName = (String) cmbCounselorname.getSelectedItem();
        String dateText = txtdate.getText().trim();
        String timeText = (String) cmbtime.getSelectedItem();
        String status = "Scheduled";

        // Validation for empty fields
        if (studentName.isEmpty() || counselorName == null || dateText.isEmpty() || timeText == null) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Parse date and time
            LocalDate appointmentDate = LocalDate.parse(dateText, DateTimeFormatter.ofPattern("M/d/yy")); // Adjust format as needed
            LocalTime appointmentTime = LocalTime.parse(timeText, DateTimeFormatter.ofPattern("HH:mm"));

            // Create Appointment object
            Appointment newAppointment = new Appointment(0, studentName, counselorName, appointmentDate, appointmentTime, status);

            // Add to database
            dao.add(newAppointment);
            JOptionPane.showMessageDialog(this, "Appointment added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Clear input fields
            txtStudentName.setText("");
            txtdate.setText("");
            cmbCounselorname.setSelectedIndex(0);
            cmbtime.setSelectedIndex(0);

            // Refresh table
            btnViewActionPerformed(evt);
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(this, "Invalid date or time format. Please use MM/dd/yy for date and HH:mm for time.", 
                "Format Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error adding appointment: " + e.getMessage(), 
                "Database Error", JOptionPane.ERROR_MESSAGE);
    }
    
    
      

       
    
    }//GEN-LAST:event_BtnAddActionPerformed

    private void BtnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnHomeActionPerformed
        
        Dashboard dashboard = new Dashboard();
        dashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BtnHomeActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        ///get selected row                                     
        int selectedRow = tblAppointments.getSelectedRow();

        // Check if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment to update.", "No Selection", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Extract appointment ID from table
        int id = (int) tblAppointments.getValueAt(selectedRow, 0); 

        // Get values from input fields
        String studentName = txtStudentName.getText().trim();
        String counselorName = (String) cmbCounselorname.getSelectedItem();
        String dateText = txtdate.getText().trim();
        String timeText = (String) cmbtime.getSelectedItem();
        String status = "Rescheduled";

        // Validate inputs
        if (studentName.isEmpty() || counselorName == null || dateText.isEmpty() || timeText == null) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Parse date and time
            LocalDate appointmentDate = LocalDate.parse(dateText, DateTimeFormatter.ofPattern("M/d/yy"));
            LocalTime appointmentTime = LocalTime.parse(timeText, DateTimeFormatter.ofPattern("HH:mm"));

            // Create Appointment object
            Appointment updatedAppointment = new Appointment(id, studentName, counselorName, appointmentDate, appointmentTime, status);

            // Update in database
            dao.updateAppointment(updatedAppointment);
            JOptionPane.showMessageDialog(this, "Appointment updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Clear input fields
            txtStudentName.setText("");
            txtdate.setText("");
            cmbCounselorname.setSelectedIndex(0);
            cmbtime.setSelectedIndex(0);

            // Refresh table
            btnViewActionPerformed(evt);
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid date or time format. Please use MM/dd/yy for date and HH:mm for time.", 
                "Format Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error updating appointment: " + e.getMessage(), 
                "Database Error", JOptionPane.ERROR_MESSAGE);
        }

           
           
           
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void BtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelActionPerformed
        int selectedRow = tblAppointments.getSelectedRow();
    
        // Check if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment to cancel.", "No Selection", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Get ID from table
            int id = (int) tblAppointments.getValueAt(selectedRow, 0);

            // Delete from database
            dao.deleteAppointment(id);
            JOptionPane.showMessageDialog(this, "Appointment canceled successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Refresh table
            btnViewActionPerformed(evt);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error canceling appointment: " + e.getMessage(), 
                "Database Error", JOptionPane.ERROR_MESSAGE);
        }
       
       

    }//GEN-LAST:event_BtnCancelActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        try {
        // Get data using existing DAO
        List<Appointment> list = dao.getAllAppointments();

        // Clear and fill table
        DefaultTableModel model = (DefaultTableModel) tblAppointments.getModel();
        model.setRowCount(0);

        for (Appointment a : list) {
            model.addRow(new Object[] {
                a.getId(),
                a.getStudentName(),
                a.getCounselorname(),
                a.getAppointmentdate().format(DateTimeFormatter.ofPattern("M/d/yy")),
                a.getAppointmentTime().format(DateTimeFormatter.ofPattern("HH:mm")),
                a.getStatus()
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error retrieving appointments: " + e.getMessage(), 
            "Database Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnViewActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppointmentForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAdd;
    private javax.swing.JButton BtnCancel;
    private javax.swing.JButton BtnHome;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> cmbCounselorname;
    private javax.swing.JComboBox<String> cmbtime;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAppointment;
    private javax.swing.JLabel lblCounselor;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTable tblAppointments;
    private javax.swing.JTextField txtStudentName;
    private javax.swing.JFormattedTextField txtdate;
    // End of variables declaration//GEN-END:variables
    

}
